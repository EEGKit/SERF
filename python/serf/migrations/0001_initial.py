# Generated by Django 3.0.3 on 2020-08-07 22:59

import datetime
from django.db import migrations, models
import django.db.models.deletion
import numpy
import serf.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Datum',
            fields=[
                ('datum_id', models.AutoField(primary_key=True, serialize=False)),
                ('number', models.PositiveIntegerField(default=0)),
                ('span_type', serf.models.EnumField(choices=[('trial', 'trial'), ('day', 'day'), ('period', 'period')], max_length=104)),
                ('is_good', serf.models.NPArrayBlobField(blank=True, editable=True, np_dtype=bool, null=True)),
                ('start_time', models.DateTimeField(blank=True, default=datetime.datetime.now, null=True)),
                ('stop_time', models.DateTimeField(blank=True, default=None, null=True)),
            ],
            options={
                'db_table': 'datum',
            },
        ),
        migrations.CreateModel(
            name='DatumFeatureValue',
            fields=[
                ('datum_feature_id', models.AutoField(primary_key=True, serialize=False)),
                ('value', models.FloatField(blank=True, null=True)),
                ('datum', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='_feature_values', to='serf.Datum')),
            ],
            options={
                'db_table': 'datum_feature_value',
            },
        ),
        migrations.CreateModel(
            name='DetailType',
            fields=[
                ('detail_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=135, unique=True)),
                ('description', models.CharField(blank=True, max_length=300)),
            ],
            options={
                'db_table': 'detail_type',
            },
        ),
        migrations.CreateModel(
            name='FeatureType',
            fields=[
                ('feature_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=135, unique=True)),
                ('description', models.CharField(blank=True, max_length=135)),
            ],
            options={
                'db_table': 'feature_type',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('subject_id', models.AutoField(primary_key=True, serialize=False)),
                ('id', models.CharField(max_length=135, unique=True)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('sex', serf.models.EnumField(choices=[('unknown', 'unknown'), ('male', 'male'), ('female', 'female'), ('unspecified', 'unspecified')], default='unknown', max_length=104)),
                ('name', models.CharField(blank=True, max_length=135)),
            ],
            options={
                'db_table': 'subject',
            },
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('name', models.CharField(max_length=135, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=135)),
            ],
            options={
                'db_table': 'system',
            },
        ),
        migrations.CreateModel(
            name='DatumFeatureStore',
            fields=[
                ('dfv', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='store', serialize=False, to='serf.DatumFeatureValue')),
                ('x_vec', serf.models.NPArrayBlobField(blank=True, editable=True, null=True)),
                ('dat_array', serf.models.NPArrayBlobField(blank=True, editable=True, null=True)),
                ('n_channels', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('n_features', models.PositiveIntegerField(blank=True, null=True)),
                ('channel_labels', serf.models.CSVStringField(blank=True, null=True)),
            ],
            options={
                'db_table': 'datum_feature_value_store',
            },
        ),
        migrations.CreateModel(
            name='DatumStore',
            fields=[
                ('datum', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='store', serialize=False, to='serf.Datum')),
                ('x_vec', serf.models.NPArrayBlobField(blank=True, editable=True, null=True)),
                ('dat_array', serf.models.NPArrayBlobField(blank=True, editable=True, np_dtype=numpy.int16, null=True)),
                ('n_channels', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('n_samples', models.PositiveIntegerField(blank=True, null=True)),
                ('channel_labels', serf.models.CSVStringField(blank=True, null=True)),
            ],
            options={
                'db_table': 'datum_store',
            },
        ),
        migrations.CreateModel(
            name='SubjectLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(blank=True, default=datetime.datetime.now, null=True)),
                ('entry', models.TextField(blank=True)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='serf.Subject')),
            ],
            options={
                'db_table': 'subject_log',
            },
        ),
        migrations.CreateModel(
            name='Procedure',
            fields=[
                ('procedure_id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField(blank=True, default=datetime.date.today, null=True)),
                ('type', serf.models.EnumField(choices=[('none', 'none'), ('surgical', 'surgical'), ('experiment', 'experiment'), ('monitoring', 'monitoring'), ('other', 'other')], default='none', max_length=104)),
                ('a', serf.models.NPArrayBlobField(blank=True, editable=True, null=True)),
                ('distance_to_target', models.FloatField(blank=True, null=True)),
                ('e', serf.models.NPArrayBlobField(blank=True, editable=True, null=True)),
                ('electrode_config', serf.models.EnumField(choices=[('none', 'none'), ('+', '+'), ('x', 'x'), ('l', 'l')], default='none', max_length=104)),
                ('entry', serf.models.NPArrayBlobField(blank=True, editable=True, null=True)),
                ('medication_status', serf.models.EnumField(choices=[('none', 'none'), ('on', 'on'), ('off', 'off'), ('half', 'half')], default='none', max_length=104)),
                ('name', models.CharField(blank=True, max_length=135)),
                ('recording_config', serf.models.EnumField(choices=[('none', 'none'), ('left', 'left'), ('left_2', 'left_2'), ('left_3', 'left_3'), ('left_4', 'left_4'), ('right', 'right'), ('right_2', 'right_2'), ('right_3', 'right_3'), ('right_4', 'right_4'), ('bilateral', 'bilateral'), ('bilateral_2', 'bilateral_2'), ('bilateral_3', 'bilateral_3'), ('bilateral_4', 'bilateral_4'), ('full', 'full'), ('full_2', 'full_2'), ('full_3', 'full_3'), ('full_4', 'full_4'), ('array', 'array'), ('array_2', 'array_2'), ('array_3', 'array_3'), ('array_4', 'array_4')], default='none', max_length=104)),
                ('target', serf.models.NPArrayBlobField(blank=True, editable=True, null=True)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='_procedures', to='serf.Subject')),
            ],
            options={
                'db_table': 'procedure',
            },
        ),
        migrations.AddField(
            model_name='datumfeaturevalue',
            name='feature_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='serf.FeatureType'),
        ),
        migrations.AddField(
            model_name='datum',
            name='procedure',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='procedure', to='serf.Procedure'),
        ),
        migrations.AddField(
            model_name='datum',
            name='trials',
            field=models.ManyToManyField(db_table='datum_has_datum', limit_choices_to={'span_type': 'trial'}, related_name='periods', to='serf.Datum'),
        ),
        migrations.CreateModel(
            name='SubjectDetailValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, max_length=135, null=True)),
                ('detail_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='serf.DetailType')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='_detail_values', to='serf.Subject')),
            ],
            options={
                'db_table': 'subject_detail_value',
                'unique_together': {('subject', 'detail_type')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='datumfeaturevalue',
            unique_together={('datum', 'feature_type')},
        ),
        migrations.CreateModel(
            name='DatumDetailValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, max_length=135, null=True)),
                ('datum', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='_detail_values', to='serf.Datum')),
                ('detail_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='serf.DetailType')),
            ],
            options={
                'db_table': 'datum_detail_value',
                'unique_together': {('datum', 'detail_type')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='datum',
            unique_together={('procedure', 'number', 'span_type')},
        ),
    ]
